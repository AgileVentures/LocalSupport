## Not implemented
## Note the Update button seems to route the PagesController instead of the VolunteerOpsController

require 'rails_helper'

describe "organizations/edit.html.erb" do
  before(:each) do
    @organization = assign(:organization, stub_model(Organization,
                                                     :new_record? => false, :donation_info => "http://www.friendly.com/donate"
    ))
  end

  it "renders the edit organization form" do
    view.lookup_context.prefixes = %w[organizations application]
    render

    rendered.should have_selector("form", :action => organization_path(@organization), :method => "post") do |form|
    end
  end

  it "renders the edit organization form with tooltips" do
    view.lookup_context.prefixes = %w[organizations application]

    render

    hash = {'organization_name' => 'Enter a unique name',
            'organization_address'  => 'Enter a complete address',
            'organization_postcode' => 'Make sure post code is accurate',
            'organization_email' => 'Make sure email is correct',
            'organization_description' => "Enter a full description here\. When an individual searches this database all words in this description will be searched\.",
            'organization_website' => 'Make sure url is correct',
            'organization_telephone' => 'Make sure phone number is correct',
            'organization_superadmin_email_to_add' => "Please enter the details of individuals from your organisation you would like to give permission to update your entry\. E-mail addresses entered here will not be made public\.",
            'organization_donation_info' => 'Please enter a website here either to the fundraising page on your website or to an online donation site.',
            'organization_publish_email' => 'To make your email address visible to the public check this box',
            'organization_publish_telephone' => 'To make your telephone number visible to the public check this box',
            'organization_publish_address' => 'To make your full address visible to the public check this box'
    }
    hash.each do |label,tooltip|
      rendered.should have_xpath("//tr/td[contains(.,#{label})]/../td[@data-toggle=\"tooltip\"][@title=\"#{tooltip}\"]")
    end
  end

  it "renders the fields in order similar to show template" do
    render
    fields = ['organization_name',
    					'organization_description',
    					'organization_address',
    					'organization_postcode',
    					'organization_email',
    					'organization_website',
    					'organization_telephone',
    					'organization_donation_info',
    ]
    indexes = fields.map { |element| rendered.index(element) }
    indexes.should eq indexes.sort
  end

it "renders the donation_info url in edit form" do
  render
  rendered.should have_field :organization_donation_info,
                             :with => "http://www.friendly.com/donate"
end

it "renders a form field to add an superadministrator email" do
  render
  rendered.should have_field :organization_superadmin_email_to_add
end

it "renders a checkbox to make address public" do
  render
  rendered.should have_selector('input', :id => 'organization_publish_address', :type => 'checkbox')
end

it "renders a checkbox to make email public" do
  render
  rendered.should have_selector('input', :id => 'organization_publish_email', :type => 'checkbox')
end

it "renders a checkbox to make phone number public" do
  render
  rendered.should have_selector('input', :id => 'organization_publish_phone', :type => 'checkbox')
end

it 'renders an update button with Anglicized spelling of Organisation' do
  render
  rendered.should have_selector("input", :type => "submit", :value => "Update Organisation")
end
#todo: move this into proper integration test to avoid the errors mocking
#out being coupled with rails
it 'does not show errors on the page outside of flash' do
  errors = double("errors", :any? => true, :count => 1, :full_messages => ["Sample error"], :[] => double("somethingRailsExpects", :any? => false))
  org = stub_model(Organization)
  org.stub(:errors => errors)
  @organization = assign(:organization, org)
  render
  rendered.should_not have_content("Sample error")
end
end
